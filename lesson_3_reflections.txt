When would you want to create a remote repository rather than keeping all your work local?

When your project is collaborative, having a remote allows your other collaboraters to keep
their work together and synchronized. Also, if you want to share your project online, having
a remote repository allows others to see what you accomplished.


Why might you want to always pull changes manually rather than having Git automatically stay
up-to-date with your remote repository?

Changes can cause conflicts. If you are developing a new feature, your priority is to finish
the feature, and then to resolve any conflicts. Manual pulling allows you to keep focus on
the development of features and then deciding when you want to include the latest version and 
integrate changes.


Describe the differences between forks, clones, and branches. When would you use one instead of
another?

Forks are used when you wish to build on someone else's repository but do not have permission to
change the original. Clones are when you want to work on a GitHub remote repository on your local
machine. Branches are when you wish to propose changes to an existing repository but do not want
to declare the changes as working or part of the master "production-level" state.


What is the benefit of having a copy of the last known state of the remote stored locally?

Knowing where the last known state of the remote was allows you to work offline and know where
you or your collaborators left off in your project.


How would you collaborate without using Git or GitHub? What would be easier, and what
would be harder?

Without Git/GitHub I would collaborating using email or a cloud service to share files
with collaborators. This has the disadvantage of losing the version control aspect of
Git. It would also make merging work done by different collaborators difficult.


When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

Making changes directly in master has the advantage of simplicity. Working directly in one
branch means you do not have to worry about merge conflicts or other issues. You can
directly push your code to the branch. The disadvantage of pushing to master is that your
collaborators do not have a chance to approve or look over changes you propose before
you commit them to the branch. This is where working in separate branches has advantages.
If you make a change in a different branch and think it should be part of the main project
(i.e. in the master branch), you can initiate a pull request and your collaborators can
look at your changes and see if it makes sense for them to be part of master or not. This
keeps the collaborative nature of your project intact.